[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float outline_mix = 1.0;

float texelFetchAlpha(sampler2D texSampler, ivec2 coords, ivec2 texSize)
{
	ivec2 clamp_coords = ivec2(clamp(coords.x, 0, texSize.x-1), clamp(coords.y, 0, texSize.y-1));
	
	return texelFetch(texSampler, clamp_coords, 0).a;
}

void fragment()
{	
	vec2 invTextureSize = (1.0 / TEXTURE_PIXEL_SIZE);
	ivec2 texSize = textureSize(TEXTURE, 0);
			
	float alpha_around = 
		  texelFetchAlpha(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(-1,-1), texSize )
		+ texelFetchAlpha(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(-1,0), texSize )
		+ texelFetchAlpha(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(-1,+1), texSize )
		+ texelFetchAlpha(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(0,-1), texSize )
		+ texelFetchAlpha(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(0,+1), texSize )
		+ texelFetchAlpha(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(+1,-1), texSize )
		+ texelFetchAlpha(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(+1,0), texSize )
		+ texelFetchAlpha(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(+1,+1), texSize );
	
	
	
	vec4 diffuse = texture(TEXTURE, UV.xy);
	COLOR = mix
	(
		mix
		(
			diffuse, 
			vec4(0.0, 0.0, 0.0, 1.0), 
			clamp(alpha_around, 0.0, 1.0) * outline_mix
		),
		diffuse, 
		diffuse.a
	);
	
/*mat3( 
	    vec3(1.0, 2.0, 1.0),
	    vec3(0.0, 0.0, 0.0),
	    vec3(-1.0, -2.0, -1.0)
    );

	const mat3 sy = mat3( 
        vec3(1.0, 0.0, -1.0),
	    vec3(2.0, 0.0, -2.0),
	    vec3(1.0, 0.0, -1.0)
	);
	

	vec2 invTextureSize = (1.0 / TEXTURE_PIXEL_SIZE);
	vec4 diffuse = texture(TEXTURE, UV.xy);
		
	mat3 I;      
  	I[0][0] = texelFetch(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(-1,-1), 0 ).a;
    I[0][1] = texelFetch(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(-1,0), 0 ).a;
    I[0][2] = texelFetch(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(-1,+1), 0 ).a;
    I[1][0] = texelFetch(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(0,-1), 0 ).a;
    I[1][1] = texelFetch(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(0,0), 0 ).a;
    I[1][2] = texelFetch(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(0,+1), 0 ).a;
    I[2][0] = texelFetch(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(+1,-1), 0 ).a;
    I[2][1] = texelFetch(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(+1,0), 0 ).a;
    I[2][2] = texelFetch(TEXTURE, ivec2(UV.xy * invTextureSize) + ivec2(+1,+1), 0 ).a;
		
	float gx = dot(sx[0], I[0]) + dot(sx[1], I[1]) + dot(sx[2], I[2]); 
	float gy = dot(sy[0], I[0]) + dot(sy[1], I[1]) + dot(sy[2], I[2]);
	
	float g = sqrt(pow(gx, 2.0)+pow(gy, 2.0));
	
	COLOR = vec4(diffuse.rgb - g * outline_mix, diffuse.a);*/
}"

[resource]
shader = SubResource( 1 )
shader_param/outline_mix = 1.0
